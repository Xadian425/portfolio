/* autogenerated by Processing revision 1286 on 2025-10-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class SpaceGame extends PApplet {

//Xadian Butcher | 10/18/25 | SpaceGame
SpaceShip s1;
Rock r1;
ArrayList<PowerUp> powups = new ArrayList<PowerUp>();
ArrayList<Rock> rocks = new ArrayList<Rock>();
ArrayList<Laser> lasers = new ArrayList<Laser>();
ArrayList<Star> stars = new ArrayList<Star>();
Timer rockTimer, puTimer;
int score, rocksPassed;

 public void setup() {
  /* size commented out by preprocessor */;
  s1 = new SpaceShip();
  r1 = new Rock();
  puTimer = new Timer(5000);
  puTimer.start();
  rockTimer = new Timer(1000);
  rockTimer.start();
  score = 0;
  rocksPassed = 0;
}

 public void draw() {
  background(10);

  // Distributes a powerup on a Timer
  if (puTimer.isFinished()) {
    powups.add(new PowerUp());
    puTimer.start();

    // Display and moves all powerups
    for (int i = 0; i < powups.size(); i++) {
      PowerUp pu = powups.get(i);
      pu.move();
      pu.display();

      // collison detection between rock and ship
      if (pu.intersect(s1)) {
        // Remove PowerUp
        powups.remove(pu);
        //Based on type benefit player
        if (pu.type == 'H') {
          s1.health+=100;
        } else if (pu.type == 'T') {
          s1.turretCount+=1;
          if (s1.turretCount>5) {
            s1.turretCount = 5;
          }
        } else if (pu.type == 'A') {
          s1.laserCount+=1000;
        }
      }
      if (pu.reachedBottom()==true) {
        powups.remove(pu);
        // infulence score

        // lower health of ship
      }
      println(powups.size());
    }

    //adding stars
    stars.add(new Star());

    for (int i = 0; i < stars.size(); i++) {
      Star star = stars.get(i);
      star.display();
      star.move();
      if (star.reachedBottom()) {
        stars.remove(star);
      }
    }

    // Distributing Rocks on Timer
    if (rockTimer.isFinished()) {
      rocks.add(new Rock());
      rockTimer.start();
    }
    // Display of Rocks
    for (int i = 0; i < rocks.size(); i++) {
      Rock rock = rocks.get(i);
      // collison detection between rock and ship
      if (s1.intersect(rock)) {
        rocks.remove(rock);
        score = score + rock.diam;
        s1.health -= rock.diam;
      }
      rock.display();
      rock.move();
      if (rock.reachedBottom()==true) {
        rocks.remove(rock);
        // infulence score

        // lower health of ship
        rocksPassed++;
      }
      println(rocks.size());
    }


    for (int i = 0; i < lasers.size(); i++) {
      Laser laser = lasers.get(i);
      for (int j = 0; j<rocks.size(); j++) {
        Rock r = rocks.get(j);
        if (laser.intersect(r)) {
          // Reduce hit points on rock and removes rock
          r.diam = r.diam - 10;
          if (r.diam<5) {
            rocks.remove(r);
          }
          // Remove the laser
          lasers.remove(laser);
          // Do something
          score = score +10;
          // Provide amimated gif and explosion sound
        }
      }
      laser.display();
      laser.move();
      if (laser.reachedTop()) {
        lasers.remove(laser);
      }
    }

    s1.display();
    s1.move(mouseX, mouseY);
    r1.display();
    r1.move();
    r1.reachedBottom();
    infoPanel();
  }
}
 public void mousePressed() {
  if (s1.fire()) {
    lasers.add(new Laser(s1.x, s1.y));
    s1.laserCount--;
  }
}


 public void infoPanel() {
  rectMode(CENTER);
  fill(127, 127);
  rect(width/2, 25, width, 50);
  fill(220);
  textSize(25);
  text("Score:" + score, 20, 40);
  text("Passed Rocks: "+rocksPassed, width - 180, 40);
  text("Health: "+ s1.health, 350, height-20);
  text("Ammo: " + s1.laserCount, 200, height -20);
  text("Turrets: " + s1.turretCount, width-180, 475);
  fill(255);
  rect(50, height-100, 100, 10);
  fill(255, 0, 0);
  rect(50, height-100, s1.health, 10);
}
class Laser {
  // Member Variables
  int x, y, w, h, speed;
  PImage laser;

  // Constructor
  Laser(int x, int y) {
    this.x = x;
    this.y = y;
    w = 6;
    h = 12;
    speed = 5;
    laser = loadImage("laser.png");
  }

  // Member Methods
   public void display() {
    laser.resize(10, 10);
    imageMode(CENTER);
    image(laser, x, y);
  }

   public void move() {
    y = y - speed;
  }

   public void fire() {
  }

   public boolean reachedTop() {
    if (y<-20) {
      return true;
    } else {
      return false;
    }
  }
 public boolean intersect(Rock r) {
 float d = dist(x,y,r.x,r.y);
 if(d<50) {
   return true;
    } else  {
    return false;
    }
  }
}
class PowerUp {
  // Member Variables
  int x, y, diam, speed;
  char type;
  int c1;

  //PImage r1;

  // Constructor
  PowerUp() {
    x = PApplet.parseInt(random(width));
    y = -100;
    diam = 100;
    speed = 5;
    if (random(10)>7) {
      //r1 = loadImage("rock01.png");
      type = 'H';
      c1 = color(20, 255, 22);
    } else if (random(10)>5) {
      //r1 = loadImage("rock02.png");
      type = 'T';
      c1 = color(234, 33, 22);
    } else {
      // r1 = loadImage("rock03.png");
      type = 'A';
      c1 = color(20, 22, 222);
    }
  }

  // Member Methods
   public void display() {
    fill(c1);
    ellipse(x, y, diam, diam);
    fill(255);
    text(type, x, y);
    // imageMode(CENTER);
    //if(diam<1) {
    //diam = 10;
  }
  //r1.resize(diam,diam);
  //image(r1,x,y);


   public void move() {
    y = y + speed;
  }


   public boolean reachedBottom() {
    if (y>height+diam) {
      return true;
    } else {
      return false;
    }
  }
   public boolean intersect(SpaceShip s) {
 float d = dist(x,y,s.x,s.y);
 if(d<50) {
   return true;
    } else  {
    return false;
    }
  }
}


 
 
class Rock {
 // Member Variables
 int x,y,diam,speed;
 PImage r1; 
 
 // Constructor
 Rock() {
x = PApplet.parseInt(random(width));
y = -100;
 diam = PApplet.parseInt(random(10,100));
 speed = PApplet.parseInt(random(1,4));
  if(random(10)>7) {
   r1 = loadImage("rock01.png");
   } else if(random(10)>5) {
    r1 = loadImage("rock02.png");
   } else {
    r1 = loadImage("rock03.png");
   }
 }


 // Member Methods
  public void display() {
  imageMode(CENTER);
 if(diam<1) {
 diam = 10;
 }
  r1.resize(diam,diam);
  image(r1,x,y);
  }

  public void move() {
  y = y + speed;
 }

  public void fire() {}
 
  public boolean reachedBottom() {
 if(y>height+diam) {
  return true;
 } else {
 return false;
  }
 
 }
 public boolean intersect() {
 return true;
}
 
 }
class SpaceShip {
  // Member Variables
  int x, y, w,laserCount,turretCount,health;
  PImage ship;

  // Constructor
  SpaceShip() {
    x = width/2;
    y= height/2;
    w = 100;
    laserCount = 1000;
    turretCount = 1;
    health = 100;
    ship = loadImage("ship.png");
  }

  // Member Methods
   public void display() {
    imageMode(CENTER);
    image(ship, x, y);
  }

   public void move(int x, int y) {
    this.x = x;
    this.y = y;
  }

  public boolean fire () {
  if (laserCount>0) {
  return true;
  } else {
 return false;
  }
 }
   public boolean intersect(Rock r) {
    float d = dist(x, y, r.x, r.y);
    if (d<50) {
      return true;
    } else {
      return false;
    }
  }
}
class Star {
  // Member variables
  int x, y, w, speed;

  Star() {
    x = PApplet.parseInt(random(width));
    y = -10;
    w = PApplet.parseInt(random(1, 4));
    speed = PApplet.parseInt(random(2, 8));
  }
   public void display() {
    fill(random(225, 255));
    ellipse(x, y, w, w);
  }

   public void move() {
    y = y + speed;
  }

   public boolean reachedBottom() {
    if (y>height+10) {
      return true;
    } else {
      return false;
    }
  }
}
// Example 10-5: Object-oriented timer
// by Daniel Shiffman

class Timer {

  int savedTime; // When Timer started
  int totalTime; // How long Timer should last

  Timer(int tempTotalTime) {
    totalTime = tempTotalTime;
  }

  // Starting the timer
   public void start() {
    // When the timer starts it stores the current time in milliseconds.
    savedTime = millis();
  }

  // The function isFinished() returns true if 5,000 ms have passed. 
  // The work of the timer is farmed out to this method.
   public boolean isFinished() { 
    // Check how much time has passed
    int passedTime = millis()- savedTime;
    if (passedTime > totalTime) {
      return true;
    } else {
      return false;
    }
  }
}


  public void settings() { size(500, 500); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "SpaceGame" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
